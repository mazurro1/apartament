{"version":3,"sources":["elements/Input/Input.js","elements/formElement/formElement.js","component/loginAccount.js","component/resetPassword.js","component/login.js"],"names":["input","type","checked","onChange","name","value","placeholder","className","disabled","inputs","formElement","itemName","formName","itemFalseName","formValidation","itemValidation","itemValue","itemOnChange","itemType","itemPlaceholder","itemChecked","Input","loginAccount","handleResetPassword","handleOnClickSave","resetPasswordVisible","animationTiming","CSSTransition","in","timeout","mountOnEnter","unmountOnExit","classNames","Title","FormButton","buttonName","buttonOnClick","buttonColor","buttonInline","resetPassword","reset_password_visible","resetPasswordValidation","handleInputOnChangePassword","handleOnClickResetPassword","email","validated","Login","state","form","password","handleInputOnChange","e","newForm","updateFormElement","target","checkValidity","setState","preventDefault","props","login_validation_change","onAuth","onAuth_Reset_Password","nextProps","nextState","this","isValid","length","test","changePage","signed","to","errorMessage","errorLogin","Modal","modalOn","onClickButton","is_error_login","modalNewAccount","newAccount","modalError","is_newAccount","formInputsMap","id","loginValidation","map","item","key","loginVisible","errorResetPassword","error_reset_password","onClick","login_visible","Component","connect","login","errorNetwork","dispatch","isSignUp","actionTypes","error_network"],"mappings":"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","file":"static/js/5.ce39e377.chunk.js","sourcesContent":["import React from \"react\";\r\nconst input = ({\r\n  type,\r\n  checked,\r\n  onChange,\r\n  name,\r\n  value,\r\n  placeholder,\r\n  className,\r\n  disabled\r\n}) => {\r\n  const inputs =\r\n    type === \"checkbox\" ? (\r\n      <input\r\n        checked={checked}\r\n        onChange={onChange}\r\n        name={name}\r\n        type={type}\r\n        className={`button2 ${className}`}\r\n        placeholder={placeholder}\r\n        disabled={disabled}\r\n      />\r\n    ) : (\r\n      <input\r\n        value={value}\r\n        onChange={onChange}\r\n        name={name}\r\n        type={type}\r\n        className={`button ${className}`}\r\n        placeholder={placeholder}\r\n        disabled={disabled}\r\n      />\r\n    );\r\n  return <>{inputs}</>;\r\n};\r\nexport default input;\r\n","import React from \"react\";\r\nimport Input from \"../Input/Input\";\r\nimport PropTypes from \"prop-types\";\r\n\r\nconst formElement = ({\r\n  itemName = \"\",\r\n  formName = \"\",\r\n  itemFalseName,\r\n  formValidation = true,\r\n  itemValidation = false,\r\n  itemValue = \"\",\r\n  itemOnChange,\r\n  itemType,\r\n  itemPlaceholder = \"\",\r\n  itemChecked = false,\r\n  disabled = false\r\n}) => {\r\n  return (\r\n    <div className=\"container\">\r\n      <div className=\"row mt-2\">\r\n        <div className=\"col-lg-2 offset-md-3 col-md-3 col-12\">\r\n          <div className=\"positionTop animation\">\r\n            {formName}\r\n            {formValidation && !itemValidation ? (\r\n              <div className=\"font-12 text-danger font-weight-bold mb-1 mb-md-0\">\r\n                {itemFalseName}\r\n              </div>\r\n            ) : null}\r\n          </div>\r\n        </div>\r\n        <div className=\"col-lg-4 col-md-5 col-12\">\r\n          <Input\r\n            className={formValidation && !itemValidation ? \"formInvalid\" : null}\r\n            value={itemValue === null ? \"\" : itemValue}\r\n            onChange={itemOnChange}\r\n            name={itemName}\r\n            type={itemType}\r\n            placeholder={itemPlaceholder}\r\n            checked={itemChecked}\r\n            disabled={disabled}\r\n          />\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nformElement.propTypes = {\r\n  itemName: PropTypes.string,\r\n  formName: PropTypes.string,\r\n  itemFalseName: PropTypes.string,\r\n  formValidation: PropTypes.bool,\r\n  itemValidation: PropTypes.bool,\r\n  itemValue: PropTypes.any,\r\n  itemOnChange: PropTypes.func.isRequired,\r\n  itemType: PropTypes.string.isRequired,\r\n  itemPlaceholder: PropTypes.string,\r\n  itemChecked: PropTypes.any\r\n};\r\n\r\nexport default formElement;\r\n","import React from \"react\";\r\nimport Title from \"../elements/Title/Title\";\r\nimport FormButton from \"../elements/formButton/FormButton\";\r\nimport CSSTransition from \"react-transition-group/CSSTransition\";\r\n\r\nconst loginAccount = ({\r\n  inputs,\r\n  handleResetPassword,\r\n  handleOnClickSave,\r\n  resetPasswordVisible,\r\n  animationTiming\r\n}) => {\r\n  return (\r\n    <CSSTransition\r\n      in={resetPasswordVisible === false}\r\n      timeout={animationTiming}\r\n      mountOnEnter\r\n      unmountOnExit\r\n      classNames=\"animationLeft\"\r\n    >\r\n      <div className=\"accountSetting\">\r\n        <div className=\"container\">\r\n          <Title name=\"LOGOWANIE\" />\r\n          {inputs}\r\n\r\n          <div className=\"row margin-top-40\">\r\n            <div className=\"col-12\">\r\n              <div className=\"text-center \">\r\n                <FormButton\r\n                  buttonName=\"Odzyskaj hasło\"\r\n                  buttonOnClick={handleResetPassword}\r\n                  buttonColor=\"red\"\r\n                  buttonInline={true}\r\n                />\r\n                <FormButton\r\n                  buttonName=\"Zaloguj\"\r\n                  buttonOnClick={handleOnClickSave}\r\n                  buttonColor=\"gray\"\r\n                  buttonInline={true}\r\n                />\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </CSSTransition>\r\n  );\r\n};\r\n\r\nexport default loginAccount;\r\n","import React from \"react\";\r\nimport Title from \"../elements/Title/Title\";\r\nimport FormElement from \"../elements/formElement/formElement\";\r\nimport FormButton from \"../elements/formButton/FormButton\";\r\nimport CSSTransition from \"react-transition-group/CSSTransition\";\r\n\r\nconst resetPassword = ({\r\n  resetPasswordVisible,\r\n  reset_password_visible,\r\n  resetPassword,\r\n  resetPasswordValidation,\r\n  handleInputOnChangePassword,\r\n  handleOnClickResetPassword,\r\n  animationTiming\r\n}) => {\r\n  return (\r\n    <CSSTransition\r\n      in={resetPasswordVisible}\r\n      timeout={animationTiming}\r\n      mountOnEnter\r\n      unmountOnExit\r\n      classNames=\"animationRight\"\r\n    >\r\n      <div className=\"accountSetting\">\r\n        <div className=\"container\">\r\n          <Title name=\"ODZYSKIWANIE HASŁA\" />\r\n          <FormElement\r\n            formName=\"Twój adres e-mail\"\r\n            itemFalseName=\"Nie poprawny e-mail\"\r\n            formValidation={resetPasswordValidation}\r\n            itemValidation={resetPassword.email.validated}\r\n            itemOnChange={handleInputOnChangePassword}\r\n            itemValue={resetPassword.email.value}\r\n            itemName=\"email\"\r\n            itemType=\"email\"\r\n            itemPlaceholder=\"\"\r\n          />\r\n\r\n          <div className=\"text-center margin-top-40\">\r\n            <FormButton\r\n              buttonName=\"Powrót\"\r\n              buttonColor=\"red\"\r\n              buttonInline={true}\r\n              buttonOnClick={reset_password_visible}\r\n            />\r\n            <FormButton\r\n              buttonName=\"Wyślij\"\r\n              buttonColor=\"gray\"\r\n              buttonInline={true}\r\n              buttonOnClick={handleOnClickResetPassword}\r\n            />\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </CSSTransition>\r\n  );\r\n};\r\n\r\nexport default resetPassword;\r\n","import React, { Component } from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport * as actionTypes from \"../store/actions\";\r\nimport { Redirect } from \"react-router-dom\";\r\nimport Modal from \"../elements/Modal/Modal\";\r\nimport ClosePage from \"../elements/closePage/closePage\";\r\nimport FormItem from \"../elements/formElement/formElement\";\r\nimport LoginAccount from \"./loginAccount\";\r\nimport ResetPassword from \"./resetPassword\";\r\nimport CSSTransition from \"react-transition-group/CSSTransition\";\r\n\r\nclass Login extends Component {\r\n  state = {\r\n    form: {\r\n      email: {\r\n        value: \"\",\r\n        validated: null\r\n      },\r\n      password: {\r\n        value: \"\",\r\n        validated: null\r\n      }\r\n    },\r\n    resetPassword: {\r\n      email: {\r\n        value: \"\",\r\n        validated: null\r\n      }\r\n    },\r\n    resetPasswordValidation: false\r\n    // validation: false\r\n  };\r\n\r\n  shouldComponentUpdate(nextProps, nextState) {\r\n    if (nextProps !== this.props || nextState !== this.state) {\r\n      return true;\r\n    } else {\r\n      return false;\r\n    }\r\n  }\r\n\r\n  checkValidity(value, validated, name) {\r\n    let isValid = false;\r\n\r\n    if (name === \"password\") {\r\n      isValid = value.length >= 6 ? true : false;\r\n    }\r\n\r\n    if (name === \"email\") {\r\n      const pattern = /[a-z0-9!#$%&'*+/=?^_`{|}~-]+(?:\\.[a-z0-9!#$%&'*+/=?^_`{|}~-]+)*@(?:[a-z0-9](?:[a-z0-9-]*[a-z0-9])?\\.)+[a-z0-9](?:[a-z0-9-]*[a-z0-9])?/;\r\n      isValid = pattern.test(value);\r\n    }\r\n\r\n    return isValid;\r\n  }\r\n\r\n  handleInputOnChange = e => {\r\n    const newForm = {\r\n      ...this.state.form\r\n    };\r\n    const updateFormElement = {\r\n      ...newForm[e.target.name]\r\n    };\r\n    if (e.target.type === \"checkbox\") {\r\n      updateFormElement.value = e.target.checked;\r\n      updateFormElement.validated = e.target.checked;\r\n    } else {\r\n      updateFormElement.value = e.target.value;\r\n      updateFormElement.validated = this.checkValidity(\r\n        updateFormElement.value,\r\n        updateFormElement.validated,\r\n        e.target.name\r\n      );\r\n    }\r\n    newForm[e.target.name] = updateFormElement;\r\n\r\n    this.setState({\r\n      form: newForm\r\n    });\r\n  };\r\n\r\n  handleInputOnChangePassword = e => {\r\n    const newForm = {\r\n      ...this.state.resetPassword\r\n    };\r\n    const updateFormElement = {\r\n      ...newForm[e.target.name]\r\n    };\r\n    if (e.target.type === \"checkbox\") {\r\n      updateFormElement.value = e.target.checked;\r\n      updateFormElement.validated = e.target.checked;\r\n    } else {\r\n      updateFormElement.value = e.target.value;\r\n      updateFormElement.validated = this.checkValidity(\r\n        updateFormElement.value,\r\n        updateFormElement.validated,\r\n        e.target.name\r\n      );\r\n    }\r\n    newForm[e.target.name] = updateFormElement;\r\n\r\n    this.setState({\r\n      resetPassword: newForm\r\n    });\r\n  };\r\n\r\n  handleOnClickSave = e => {\r\n    e.preventDefault();\r\n    this.props.login_validation_change(true);\r\n\r\n    if (this.state.form.email.validated && this.state.form.password.validated) {\r\n      this.props.onAuth(\r\n        this.state.form.email.value,\r\n        this.state.form.password.value,\r\n        false\r\n      );\r\n    }\r\n  };\r\n\r\n  handleOnClickResetPassword = e => {\r\n    e.preventDefault();\r\n    this.setState({\r\n      resetPasswordValidation: true\r\n    });\r\n    if (this.state.resetPassword.email.validated) {\r\n      this.props.onAuth_Reset_Password(this.state.resetPassword.email.value);\r\n    }\r\n  };\r\n\r\n  render() {\r\n    const { form } = this.state;\r\n    const changePage = this.props.signed ? <Redirect to=\"/\" /> : null;\r\n    const errorMessage = this.props.errorLogin ? (\r\n      <Modal\r\n        name=\"Zły login lub hasło.\"\r\n        modalOn={true}\r\n        onClickButton={() => this.props.is_error_login(false)}\r\n      />\r\n    ) : (\r\n      <Modal\r\n        name=\"Zły login lub hasło.\"\r\n        modalOn={false}\r\n        onClickButton={() => this.props.is_error_login(false)}\r\n      />\r\n    );\r\n\r\n    const modalNewAccount = this.props.newAccount ? (\r\n      <Modal\r\n        name=\"Nowe konto zostało utworzone\"\r\n        modalError={false}\r\n        modalOn={true}\r\n        onClickButton={() => this.props.is_newAccount(false)}\r\n      />\r\n    ) : (\r\n      <Modal\r\n        name=\"Nowe konto zostało utworzone\"\r\n        modalError={false}\r\n        modalOn={false}\r\n        onClickButton={() => this.props.is_newAccount(false)}\r\n      />\r\n    );\r\n\r\n    const modalErrorEmail = () => {\r\n      if (this.props.errorResetPassword === true) {\r\n        return (\r\n          <>\r\n            <Modal\r\n              modalError={false}\r\n              name=\"Wiadomosć została wysłana na podany adres e-mail\"\r\n              modalOn={true}\r\n              onClickButton={() => this.props.error_reset_password(null)}\r\n            />\r\n            <Modal\r\n              name=\"Podany e-mail nie istnieje\"\r\n              modalOn={false}\r\n              onClickButton={() => this.props.error_reset_password(null)}\r\n            />\r\n          </>\r\n        );\r\n      } else if (this.props.errorResetPassword === false) {\r\n        return (\r\n          <>\r\n            <Modal\r\n              modalError={false}\r\n              name=\"Wiadomosć została wysłana na podany adres e-mail\"\r\n              modalOn={false}\r\n              onClickButton={() => this.props.error_reset_password(null)}\r\n            />\r\n            <Modal\r\n              name=\"Podany e-mail nie istnieje\"\r\n              modalOn={true}\r\n              onClickButton={() => this.props.error_reset_password(null)}\r\n            />\r\n          </>\r\n        );\r\n      } else {\r\n        return (\r\n          <>\r\n            <Modal\r\n              modalError={false}\r\n              name=\"Wiadomosć została wysłana na podany adres e-mail\"\r\n              modalOn={false}\r\n              onClickButton={() => this.props.error_reset_password(null)}\r\n            />\r\n            <Modal\r\n              name=\"Podany e-mail nie istnieje\"\r\n              modalOn={false}\r\n              onClickButton={() => this.props.error_reset_password(null)}\r\n            />\r\n          </>\r\n        );\r\n      }\r\n    };\r\n\r\n    const formInputs = [\r\n      {\r\n        id: 1,\r\n        formName: \"Adres e-mail:\",\r\n        itemFalseName: \"Niepoprawny e-mail\",\r\n        formValidation: this.props.loginValidation,\r\n        itemValidation: form.email.validated,\r\n        itemOnChange: this.handleInputOnChange,\r\n        itemValue: form.email.value,\r\n        itemName: \"email\",\r\n        itemType: \"text\",\r\n        itemPlaceholder: \"\",\r\n        itemChecked: false\r\n      },\r\n      {\r\n        id: 2,\r\n        formName: \"Hasło:\",\r\n        itemFalseName: \"Niepoprawne hasło\",\r\n        formValidation: this.props.loginValidation,\r\n        itemValidation: form.password.validated,\r\n        itemOnChange: this.handleInputOnChange,\r\n        itemValue: form.password.value,\r\n        itemName: \"password\",\r\n        itemType: \"password\",\r\n        itemPlaceholder: \"\",\r\n        itemChecked: false\r\n      }\r\n    ];\r\n\r\n    const formInputsMap = formInputs.map(item => (\r\n      <FormItem\r\n        key={item.id}\r\n        formName={item.formName}\r\n        itemFalseName={item.itemFalseName}\r\n        formValidation={item.formValidation}\r\n        itemValidation={item.itemValidation}\r\n        itemOnChange={item.itemOnChange}\r\n        itemValue={item.itemValue}\r\n        itemName={item.itemName}\r\n        itemType={item.itemType}\r\n        itemPlaceholder={item.itemPlaceholder}\r\n        itemChecked={item.itemChecked}\r\n      />\r\n    ));\r\n\r\n    return (\r\n      <CSSTransition\r\n        in={this.props.loginVisible}\r\n        timeout={this.props.animationTiming}\r\n        mountOnEnter\r\n        unmountOnExit\r\n        classNames=\"animationRight\"\r\n      >\r\n        <div className=\"pagePosition\">\r\n          {modalErrorEmail()}\r\n          {changePage}\r\n          {errorMessage}\r\n          {modalNewAccount}\r\n\r\n          <div className=\"container positionRelative \">\r\n            <ClosePage onClick={this.props.login_visible} />\r\n            <div className=\"positionAbsoluteWidth\">\r\n              <LoginAccount\r\n                inputs={formInputsMap}\r\n                handleResetPassword={this.props.reset_password_visible}\r\n                handleOnClickSave={this.handleOnClickSave}\r\n                resetPasswordVisible={this.props.resetPasswordVisible}\r\n                animationTiming={this.props.animationTiming}\r\n              />\r\n            </div>\r\n            <div className=\"positionAbsoluteWidth\">\r\n              <ResetPassword\r\n                resetPasswordVisible={this.props.resetPasswordVisible}\r\n                reset_password_visible={this.props.reset_password_visible}\r\n                resetPasswordValidation={this.state.resetPasswordValidation}\r\n                resetPassword={this.state.resetPassword}\r\n                handleInputOnChangePassword={this.handleInputOnChangePassword}\r\n                handleOnClickResetPassword={this.handleOnClickResetPassword}\r\n                animationTiming={this.props.animationTiming}\r\n              />\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </CSSTransition>\r\n    );\r\n  }\r\n}\r\n\r\nconst mapStateToProps = state => {\r\n  return {\r\n    login: state.login,\r\n    signed: state.signed,\r\n    errorLogin: state.errorLogin,\r\n    loginVisible: state.loginVisible,\r\n    errorNetwork: state.errorNetwork,\r\n    resetPasswordVisible: state.resetPasswordVisible,\r\n    errorResetPassword: state.errorResetPassword,\r\n    loginValidation: state.loginValidation,\r\n    newAccount: state.newAccount,\r\n    animationTiming: state.animationTiming\r\n  };\r\n};\r\n\r\nconst mapDispatchToProps = dispatch => {\r\n  return {\r\n    onAuth: (email, password, isSignUp) =>\r\n      dispatch(actionTypes.auth(email, password, isSignUp)),\r\n    is_error_login: value => dispatch(actionTypes.is_error_login(value)),\r\n    login_visible: () => dispatch(actionTypes.login_visible()),\r\n    error_network: value => dispatch(actionTypes.error_network(value)),\r\n    reset_password_visible: () =>\r\n      dispatch(actionTypes.reset_password_visible()),\r\n    onAuth_Reset_Password: email =>\r\n      dispatch(actionTypes.onAuth_Reset_Password(email)),\r\n    error_reset_password: value =>\r\n      dispatch(actionTypes.error_reset_password(value)),\r\n    login_validation_change: value =>\r\n      dispatch(actionTypes.login_validation_change(value))\r\n  };\r\n};\r\n\r\nexport default connect(\r\n  mapStateToProps,\r\n  mapDispatchToProps\r\n)(Login);\r\n"],"sourceRoot":""}